/*
Generated by CodiumAI Â· https://www.codium.ai/

Code Analysis:
- The class 'SimpleGrid' is a basic Three.js grid helper that creates a grid in the scene. It implements the interfaces 'Hideable' and 'Disposable'.
- The main functionality of the class is to create a grid in the scene using Three.js GridHelper.
- The class has a private field '_grid' of type THREE.GridHelper which is used to create the grid.
- The class has a constructor that takes an instance of 'Components' as a parameter. It creates a new instance of THREE.GridHelper and adds it to the scene.
- The class has a 'get' method that returns the '_grid' field.
- The class has a 'dispose' method that disposes the '_grid' using an instance of 'Disposer'.
- The class implements the 'Hideable' interface which has a 'visible' field that can be used to show or hide the grid.
- The class implements the 'Disposable' interface which has a 'dispose' method that can be used to dispose the grid from memory.
- The class extends the 'Component' class which has fields 'name' and 'enabled'. The 'name' field is set to 'SimpleGrid' and the 'enabled' field is set to 'true'.
*/

/*
Test Plan:
- test_constructor_validComponents: tests that the SimpleGrid constructor adds the grid to the scene when called with a valid Components parameter. Tags: [happy path]
- test_get: tests that the get method returns the grid. Tags: [happy path]
- test_constructor_invalidComponents: tests that the SimpleGrid constructor throws an error when called with an invalid Components parameter. Tags: [edge case]
- test_setVisible_invalid: tests that the visible setter throws an error when called with an invalid value. Tags: [edge case]
- test_setVisible_true: tests that the visible setter sets the visibility of the grid to true. Tags: [happy path]
- test_setVisible_false: tests that the visible setter sets the visibility of the grid to false. Tags: [happy path]
- test_dispose: tests that the dispose method disposes the grid from memory. Tags: [happy path]
- test_dispose_children: tests that the dispose method disposes the children of the grid when called with recursive set to true. Tags: [happy path]
- test_dispose_materials: tests that the dispose method disposes the materials of the grid when called with materials set to true. Tags: [happy path]
- test_dispose_noMaterials: tests that the dispose method does not dispose the materials of the grid when called with materials set to false. Tags: [happy path]
- test_dispose_noChildren: tests that the dispose method does not dispose the children of the grid when called with recursive set to false. Tags: [happy path]
*/

import { Components } from "../../types";
import { SimpleGrid } from "./index";
import THREE from "three";

describe("SimpleGrid_class", () => {
  test("test_constructor_validComponents", () => {
    const components = new Components();
    const grid = new SimpleGrid(components);
    expect(grid.get()).toBeInstanceOf(THREE.GridHelper);
    expect(components.scene.get().children).toContain(grid.get());
  });

  test("test_get", () => {
    const components = new Components();
    const grid = new SimpleGrid(components);
    expect(grid.get()).toBeInstanceOf(THREE.GridHelper);
  });

  test("test_constructor_invalidComponents", () => {
    expect(() => {
      new SimpleGrid({} as Components);
    }).toThrow();
  });

  test("test_setVisible_invalid", () => {
    const components = new Components();
    const grid = new SimpleGrid(components);
    expect(() => {
      grid.visible = false;
    }).toThrow();
  });

  test("test_setVisible_true", () => {
    const components = new Components();
    const grid = new SimpleGrid(components);
    grid.visible = true;
    expect(grid.visible).toBe(true);
  });

  test("test_setVisible_false", () => {
    const components = new Components();
    const grid = new SimpleGrid(components);
    grid.visible = false;
    expect(grid.visible).toBe(false);
  });
});
