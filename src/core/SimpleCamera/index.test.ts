
// index.test.ts - Generated by CodiumAI

/*
Code Analysis:
- The SimpleCamera class is a component that uses yomotsu's cameracontrols to easily control the camera in 2D and 3D.
- It extends the Component class and implements the Updateable and Disposable interfaces.
- It has a name property, beforeUpdate and afterUpdate events, and an enabled property that controls whether the camera is enabled or not.
- It has a controls property that is an instance of yomotsu's cameracontrols, which is used to move, rotate, look at objects, etc.
- It has an activeCamera property that is either a PerspectiveCamera or an OrthographicCamera, depending on the current CameraProjection.
- It has a _perspectiveCamera property that is a PerspectiveCamera instance.
- It has a constructor that sets up the camera and camera controls, adds the camera to the scene, and sets up event listeners.
- It has a get method that returns the active camera.
- It has a dispose method that disposes of the camera controls and removes the camera from the scene.
- It has an update method that updates the camera controls if the camera is enabled.
- It has an updateAspect method that updates the aspect of the camera to match the size of the renderer.
- It has several private methods that set up the camera, camera controls, and event listeners, and get a subset of the THREE library.
*/

/*
Test Plan:
- test_camera_enabled: tests that the camera can be enabled and updates successfully. Tags: [happy path]
- test_camera_disabled: tests that the camera can be disabled and does not update. Tags: [happy path]
- test_renderer_not_resizeable: tests that the camera aspect ratio is not updated if the renderer is not resizeable. Tags: [edge case]
- test_camera_not_added_to_scene: tests that the camera is not added to the scene if it is not set up correctly. Tags: [edge case]
- test_camera_dispose: tests that the camera can be disposed and is removed from the scene. Tags: [happy path]
- test_camera_retrieve: tests that the camera can be retrieved. Tags: [happy path]
- test_camera_update: tests that the camera can be updated. Tags: [happy path]
- test_camera_aspect_ratio_update: tests that the camera aspect ratio can be updated successfully. Tags: [happy path]
- test_camera_controls_not_set_up: tests that the camera controls are not set up if the camera is not set up correctly. Tags: [edge case]
- test_camera_controls: tests that the camera controls work as expected. Tags: [happy path]
- test_camera_subset_of_three: tests that the camera subset of three is correctly set up. Tags: [happy path]
*/



import {SimpleCamera} from "./index";
import THREE from "three";
import {Components} from "../../types";
const components = new Components();

describe('SimpleCamera_class', () => {
  test("test_camera_enabled", () => {
    const camera = new SimpleCamera(components);
    camera.enabled = true;
    const beforeUpdateSpy = jest.spyOn(camera.beforeUpdate, "trigger");
    const afterUpdateSpy = jest.spyOn(camera.afterUpdate, "trigger");
    camera.update(1);
    expect(beforeUpdateSpy).toHaveBeenCalledTimes(1);
    expect(afterUpdateSpy).toHaveBeenCalledTimes(1);
    camera.dispose();
  });

  test("test_camera_disabled", () => {
    const camera = new SimpleCamera(components);
    camera.enabled = false;
    const beforeUpdateSpy = jest.spyOn(camera.beforeUpdate, "trigger");
    const afterUpdateSpy = jest.spyOn(camera.afterUpdate, "trigger");
    camera.update(1);
    expect(beforeUpdateSpy).toHaveBeenCalledTimes(0);
    expect(afterUpdateSpy).toHaveBeenCalledTimes(0);
    camera.dispose();
  });

  test("test_renderer_not_resizeable", () => {
    const camera = new SimpleCamera(components);
    const updateAspectSpy = jest.spyOn(camera, "updateAspect");
    camera.updateAspect();
    expect(updateAspectSpy).toHaveBeenCalledTimes(0);
    camera.dispose();
  });

  test("test_camera_not_added_to_scene", () => {
    expect(() => new SimpleCamera(components)).toThrow();
  })

  test("test_camera_dispose", () => {
    const camera = new SimpleCamera(components);
    const removeFromParentSpy = jest.spyOn(camera.activeCamera, "removeFromParent");
    const disposeSpy = jest.spyOn(camera.controls, "dispose");
    camera.dispose();
    expect(removeFromParentSpy).toHaveBeenCalledTimes(1);
    expect(disposeSpy).toHaveBeenCalledTimes(1);
  });

  test("test_camera_retrieve", () => {
    const camera = new SimpleCamera(components);
    expect(camera.get()).toBeInstanceOf(THREE.PerspectiveCamera);
    camera.dispose();
  });
});
