// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The PropertiesContainer class is a subclass of SimpleUIComponent that represents a container
for displaying properties of a selected model element. It is used in conjunction with the
PropertiesProcessor class to render the properties of a selected element in a tree view with
expandable sections.

Methods:
- constructor(components: Components): Initializes a new instance of the PropertiesContainer class with a container element created using the document.createElement() method and passed to the base class constructor.
- dispose(onlyChildren = false): Disposes of the child components of the container element, optionally removing the container element itself.
- addChild(...items: UIComponent[]): Adds one or more child components to the container element.

Fields:
- name: A string field that identifies the class as "PropertiesContainer".
- domElement: A field inherited from the base class that represents the container element for the properties display.
*/

import testComponents from "../../test/mock/testComponents";

const components = testComponents();

import { PropertiesContainer, PropertiesTable } from "./index";

describe("PropertiesContainer", () => {
  // Tests that the constructor creates a new div element and passes it to the parent constructor of SimpleUIComponent.
  it("test_constructor", () => {
    const container = new PropertiesContainer(components);
    expect(container.domElement.tagName).toBe("DIV");
  });

  // Tests that the name property is set to "PropertiesContainer".
  it("test_name_property", () => {
    const container = new PropertiesContainer(components);
    expect(container.name).toBe("PropertiesContainer");
  });

  // Tests that the dispose method removes the div element from the DOM.
  it("test_dispose_method", () => {
    const container = new PropertiesContainer(components);
    document.body.appendChild(container.domElement);
    container.dispose();
    expect(document.body.contains(container.domElement)).toBe(false);
  });

  // Tests that the get method returns the div element passed to the constructor.
  it("test_get_method", () => {
    const container = new PropertiesContainer(components);
    expect(container.get()).toBe(container.domElement);
  });
});

// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The PropertiesTable class is a subclass of SimpleUIComponent that represents a table UI
component for displaying properties. It is used to render a table with the name and value
of each property in a group, which is then added to a TreeView UI component.

Methods:
- constructor(components: Components): Initializes the PropertiesTable instance by creating a new HTML table element and passing it to the superclass constructor.
- None

Fields:
- name: string = "PropertiesTable": A string that represents the name of the PropertiesTable instance.
- None
*/

describe("PropertiesTable", () => {
  // Tests that a new instance of PropertiesTable can be created with valid Components parameter.
  it("test_creating_instance", () => {
    const table = new PropertiesTable(components);
    expect(table).toBeInstanceOf(PropertiesTable);
    expect(table.domElement.tagName).toBe("TABLE");
    expect(table.domElement.classList.contains("ifcjs-table")).toBe(true);
  });
});
